 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/admin/user_bulks", type: :request do
  let(:valid_attributes) {
    {
      file: Rack::Test::UploadedFile.new('spec/fixtures/user_bulk_file.xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    }
  }

  let(:invalid_attributes) {
    {
      file: nil
    }
  }

  describe "GET /index" do
    context 'with a no_admin user' do
      let!(:user) { create(:user) }
      before { sign_in(user) }

      it "returns http unauthorized" do
        get admin_user_bulks_url
        
        expect(response).to have_http_status(:unauthorized)
      end
    end
    context 'with a admin user' do
      let!(:user) { create(:user, role: 'admin') }
      before { sign_in(user) }

      it "returns http success" do
        get admin_user_bulks_url
        
        expect(response).to have_http_status(:success)
      end
    end
  end

  let!(:user) { create(:user, role: 'admin') }
  before { sign_in(user) }

  describe "GET /new" do
    it "renders a successful response" do
      get new_admin_user_bulk_url
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new UserBulk" do
        expect {
          post admin_user_bulks_url, params: { user_bulk: valid_attributes }
        }.to change(UserBulk, :count).by(1)
      end

      it "redirects to the created user_bulk" do
        post admin_user_bulks_url, params: { user_bulk: valid_attributes }
        expect(response).to redirect_to(admin_user_bulks_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new UserBulk" do
        expect {
          post admin_user_bulks_url, params: { user_bulk: invalid_attributes }
        }.to change(UserBulk, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post admin_user_bulks_url, params: { user_bulk: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end
end
